//
//  SearchWorker.swift
//  ItunesApiSearch
//
//  Created by Harold Campuzano Rivera on 23/12/19.
//  Copyright (c) 2019 harold-campuzano. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Alamofire

class SearchWorker{
    
    let decoder = JSONDecoder()
    func fetchResults(_ query: String)->[Result]
  {
    
    guard let url = URL(string: "https://itunes.apple.com/search?") else {
      //completion(nil)
      return []
    }
    
    AF.request(url,
               parameters: ["term":query,
                            "media":"music",
                            "limit":"20"]
               ).responseData { response in
       switch response.result {
        case .success(let value):
            let req = response.request
            do {
                let fetchResults = try self.decoder.decode(FetchResults.self , from: value)
                print(fetchResults.resultCount)
            }catch {
                print("JSONSerialization error:", error)
            }
            
           // completion(try? SomeRequest(protobuf: value))
        case .failure(let error):
            print(error)
          //  completion(nil)
        }
        
    }
    return []
  }
   
    
    /*
    func fetchAllRooms(completion: @escaping ([Result]?) -> Void) {
      guard let url = URL(string: "http://localhost:5984/rooms/_all_docs?include_docs=true") else {
        completion(nil)
        return
      }
      AF.request(url,
                        method: .get,
                        parameters: ["include_docs": "true"])
      .validate()
      .responseJSON { response in
        guard response.result.isSuccess else {
          print("Error while fetching remote rooms: \(String(describing: response.result.error)")
          completion(nil)
          return
        }

        guard let value = response.result.value as? [String: Any],
          let rows = value["rows"] as? [[String: Any]] else {
            print("Malformed data received from fetchAllRooms service")
            completion(nil)
            return
        }

        let rooms = rows.flatMap { roomDict in return RemoteRoom(jsonData: roomDict) }
        completion(rooms)
      }
    }
 */
 
}

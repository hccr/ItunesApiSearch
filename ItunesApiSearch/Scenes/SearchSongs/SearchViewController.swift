//
//  SearchViewController.swift
//  ItunesApiSearch
//
//  Created by Harold Campuzano Rivera on 23/12/19.
//  Copyright (c) 2019 harold-campuzano. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SearchDisplayLogic: class
{
    func displayResults(viewModel: Search.FetchResults.ViewModel)
}

class SearchViewController: UIViewController, SearchDisplayLogic, UITableViewDataSource, UITableViewDelegate, UISearchBarDelegate
{
    @IBOutlet weak var searchBar: UISearchBar!
    @IBOutlet weak var tableView: UITableView!
    
    
    var interactor: SearchBusinessLogic?
    var router: (NSObjectProtocol & SearchRoutingLogic & SearchDataPassing)?
    
    var displayedSongs: [Song] = []
    var searchedText = "";
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = SearchInteractor()
        let presenter = SearchPresenter()
        let router = SearchRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
        
        
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
    }
    
    
    
    func displayResults(viewModel: Search.FetchResults.ViewModel)
    {
        displayedSongs = viewModel.displayedResults
        tableView.reloadData()
        
        
    }
    
    
    
    
    
    
    // MARK: - Table view data source
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat{
        return 72
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int{
        if displayedSongs.count>0{
            return displayedSongs.count
        }
        return 1
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell
    {
        if displayedSongs.count == 0 {
            guard let cell = tableView.dequeueReusableCell(withIdentifier: "NoEncontradoCell") as?NoEncontradoTableViewCell else {
                return UITableViewCell();
            }
            
            cell.textoNoEncontrado.text = (searchedText.count>2) ? "Término no encontrado":"Inicia una búsqueda, ingresa 3 o más letras"
            return cell
        }else{
            let result = displayedSongs[indexPath.row]
            guard let cell = tableView.dequeueReusableCell(withIdentifier: "Cell") as?SearchTableViewCell else {
                return UITableViewCell();
            }
            cell.nombreArtista.text = result.artistName
            cell.nombreCancion.text = result.trackName
            
            return cell
        }
        
    }
    
    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
        self.searchedText = searchText
        guard let query = searchBar.text, query != "", query.count>2 else {
            displayedSongs = []
            tableView.reloadData()
            return
        }
        
        let request = Search.FetchResults.Request(query: query)
        interactor?.search(request: request)
    }
    
}
